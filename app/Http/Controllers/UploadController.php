<?php

namespace App\Http\Controllers;
use Illuminate\Support\Facades\Storage;
use Illuminate\Http\Request;
use Chumper\Zipper\Facades\Zipper;
use ZipArchive;
use Nathanmac\Utilities\Parser\Facades\Parser;
use App\Upload;
use App\Product;
use App\Category;

class UploadController extends Controller
{
    public function index() {

        // @FIXME 
        // Add Method for time
        $uploadStorage = Storage::files('public/product-sheets');
        //dd($uploadStorage);
        $uploadStorage = collect($uploadStorage)
                        ->map(function($file) {
                            $modified = Storage::lastModified($file);
                            $nameOnly = explode('/', $file);
                            $map = [
                                'filename' => $nameOnly[2], 
                                'modified' => $modified
                            ];
                            //dd($nameOnly);
                            return $map;
                        });
        $uploadStorage = collect($uploadStorage);
        //$zip = $this->unzipRequest();
                        //dd($uploadStorage);
        return view('upload-views.view-upload', ['filenames' => $uploadStorage]);
    }

    /**
     * Gets the ODS content finalized and read to upload
     * @TODO:
     * Something is throwing an SQL Error wich goes away after a second reload
     * maybe its the at creating the category
     */
    public function storeDatabase() {
        $xml = $this->unzipRequest();
        $dataCollection = $this->productCollection($xml);
        Product::truncate();

        foreach( $dataCollection AS $data ) {
            $category_id = Category::all()
                            ->where('category_name', $data['kategorie'])
                            ->pluck('category_id')
                            ->first();
            if( $category_id === null ) {
                $category_id = Category::create([
                    'category_name' => $data['kategorie'],
                    'category_description' => '**Autogenerated** Maybe you should correct it',
                    'picture_path' => 'fallback.jpg'
                ]);
            }
            Product::create([
                'product_name' => $data['produktname'],
                'price_wo_tax' => str_replace(',' ,'.' , $data['preis']),
                'category_id' => $category_id,
                'product_description' => $data['beschreibung']
            ]);
        }
        return redirect('products');
    }

    /**
     * Stores the File 
     * Only ODS allowed
     */
    public function store(Request $request) {
        $uploaded = $request
                    ->validate([
                        'upload' => ['mimes:ods', 'min:1', 'max:20000', 'file', 'required']
                    ]);

        /** Store File with unique Name */
        $fileName = 'produkt-liste-' . time() . '.' . $request->upload->getClientOriginalExtension();
        $request->upload->storeAs('public/product-sheets', $fileName);
        return redirect('upload');
    }

    /**
     * Gets request()->?d=link to fetch the filename
     * Converts ODS to ZIP temporary and deletes it after fetching the content
     * returns content.xml from zip aka ods-File
     */
    public function unzipRequest() {
        /** 
         * asset Method doesnt work
         * storage Link to public with:
         * php artisan storage:link
         */
        //$link = asset('storage/product-sheets/produkt-liste-1552185201.zip');
        $link = 'storage/product-sheets/' . request()->d;

        // makes shure that ods get zip
        $linkExploded = explode('.', $link);

        if($linkExploded[1] === 'ods') {

            $newLink = str_replace('ods', 'zip', $link);
            \File::copy($link, $newLink);
            $link = $newLink;
        }

        // Makes a ZIP Instance
        $zip = new ZipArchive;
        
        if($zip->open($link)) {
            $xml = $zip->getFromName('content.xml');
            $parsed = collect(Parser::xml($xml));
            $zip->close();
        }
        \File::delete($link);
        return $parsed;
    }
    /**
     * This Models the final Product Collection
     * ods->zip->xml->collection
     * 
     * returns json
     */
    public function productCollection($xml) {
        // Get XML Main Content
        $extractedData = collect($xml['office:body']['office:spreadsheet']['table:table']['table:table-row']);

        // This returns the attributes of the products like "Hauptspeise"
        $tableNames = collect($extractedData->first()['table:table-cell']);
        
        $jsonData = [];
        foreach( $extractedData AS $key => $data ) {
            if($key > 0) {
                $cellData = collect($data['table:table-cell']);
                $jsonData[$key] = [];
                
                foreach( $tableNames AS $keyName => $names) {
                    $cellData = $cellData;
                    $converted = strtolower($names['text:p']);
                    $jsonData[$key][$converted] = $cellData->pluck('text:p')[$keyName];
                }
            }
        }
        return collect($jsonData);
    }
}